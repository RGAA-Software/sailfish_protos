syntax = "proto3";

package rgaa;

enum VideoType {
    kH264 = 0;
    kH265 = 1;
}

// kConfigSync
message VideoConfigSync {
    VideoType type = 1;
    int32 width = 2;
    int32 height = 3;
}

message AudioConfigSync {
    int32 samples = 1;
    int32 channels = 2;
}

// kVideoFrame
message VideoFrameSync {
    VideoType type = 1;
    bytes data = 2;
    uint64 frame_index = 3;
    bool key = 4;
    int32 width = 5;
    int32 height = 6;
    int32 dup_idx = 7;
    int32 encode_time = 8;
    int32 previous_network_time = 9;
}

// kAudioFrame
message AudioFrameSync {
    bytes data = 1;
    int32 frame_size = 2;
    int32 samples = 3;
    int32 channels = 4;
    int32 bits = 5;
}

enum ClientCommandType {
    kStartDebug = 0;
    kStopDebug = 1;
    kEnableClipboard = 2;
    kDisableClipboard = 3;
    kEnableAudio = 4;
    kDisableAudio = 5;
}

// kClientReport
message ClientCommandReport {
    ClientCommandType type = 1;
}

// kServerInfoSync
message ServerInfoSync {

}

//https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursora
enum CursorType  {
    kIDC_APPSTARTING = 0;
    kIDC_ARROW = 1;
    kIDC_CROSS = 2;
    kIDC_HAND = 3;
    kIDC_HELP = 4;
    kIDC_IBEAM = 5;
    kIDC_ICON = 6;
    kIDC_NO = 7;
    kIDC_SIZE = 8;
    kIDC_SIZEALL = 9;
    kIDC_SIZENESW = 10;
    kIDC_SIZENS = 11;
    kIDC_SIZENWSE = 12;
    kIDC_SIZEWE = 13;
    kIDC_UPARROW = 14;
    kIDC_WAIT = 15;
}

// kCursorInfo
message CursorInfo {
    int32 width = 1;
    int32 height = 2;
    bytes data = 3;
    int32 x = 4; // left
    int32 y = 5; // top
    int32 hotspot_x = 6; // left
    int32 hotspot_y = 7; // top
    CursorType type = 8;
    int32 tex_left = 9;
    int32 tex_right = 10;
    int32 dup_idx = 11;
}

enum MouseKey {
    kLeft = 0;
    kMiddle = 1;
    kRight = 2;
    kX = 3;
}

// kMouseInfo
message MouseInfoReport {
    MouseKey key = 1;
    bool pressed = 2;
    bool released = 3;
    float mouse_x = 4; // 0.0 - 1.0
    float mouse_y = 5;
    float mouse_dx = 6; //
    float mouse_dy = 7;
    int32 middle_scroll = 8;
}

// kKeyboardInfo
message KeyboardInfoReport {
    int32 vk = 1;
    bool pressed = 2;
    int32 scancode = 3;
    bool caps_lock = 4;
    bool num_lock = 5;
    bool shift = 6;
    bool alt = 7;
}

// kMessageACK
message MessageACK {
    MessageType type = 1;
    // from Message::send_time
    uint64 send_time = 2;
    uint64 frame_index = 3;
}

message StartRecordingReport {
    bool audio = 1;
    int32 bitrate = 2;
    int32 approximate_fps = 3;
}

message StopRecordingReport {

}

message HeartBeat {
    uint64 index = 1;
}

message MonitorInformation {
    int32 width = 1;
    int32 height = 2;
}

message ConfigSync {
    int32 screen_size = 1;
    repeated MonitorInformation monitors = 2;
}

message Clipboard {
    string msg = 1;
}

// messages

enum MessageType {
    kVideoConfigSync = 0;
    kAudioConfigSync = 1;
    kVideoFrame = 2;
    kAudioFrame = 3;
    kClientCommandReport = 4;
    kServerInfoSync = 5;
    kCursorInfo = 6;
    kMouseInfo = 7;
    kKeyboardInfo = 8;
    kMessageACK = 9;
    kStartRecording = 10;
    kStopRecording = 11;
    kHeartBeat = 12;
    kConfig = 13;
    kClipboard = 14;
}

message NetMessage {
    MessageType type = 1;
    uint64 send_time = 2;
    VideoConfigSync video_config_sync = 3;
    VideoFrameSync video_frame = 4;
    AudioConfigSync audio_config_sync = 5;
    AudioFrameSync audio_frame = 6;
    ClientCommandReport client_cmd_report = 7;
    ServerInfoSync server_info_sync = 8;
    MouseInfoReport mouse_info = 9;
    KeyboardInfoReport keyboard_info = 10;
    MessageACK message_ack = 11;
    StartRecordingReport start_recording = 12;
    StopRecordingReport stop_recording = 13;
    HeartBeat heart_beat = 14;
    ConfigSync config = 15;
    Clipboard clipboard = 16;
    CursorInfo cursor_info = 17;
}